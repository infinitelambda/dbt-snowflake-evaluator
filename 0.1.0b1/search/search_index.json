{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snowflake Account Evaluator dbt package","text":"<p>Do you struggle with cost, security, performance or config issues on you Snowflake account? This tool is designed for you! and create a health check, whether your account follow the best practices and Snowflake recommendations.</p>"},{"location":"#features","title":"Features","text":"<p>This package collects best practices for different areas regarding account management. - Account / role / warehouse - Security - Cost - Performance</p>"},{"location":"Rules/Account/account_statement_timeout/","title":"Account Statement Timeout","text":""},{"location":"Rules/Account/account_statement_timeout/#model-name","title":"Model name","text":"<p>account_statement_timeout</p>"},{"location":"Rules/Account/account_statement_timeout/#description","title":"Description","text":"<p>Parameters STATEMENT_QUEUED_TIMEOUT_IN_SECONDS and  STATEMENT_TIMEOUT_IN_SECONDS can be used to automatically stop queries that are taking too long to execute, either due to a user error or a frozen cluster. They can be set at an account level (the scope of this rule) or lower level (e.g. warehouse, session, user,...). The lower level settings take precedence.</p> <p>This rule checks whether the two parameters are in the interval between 0 and 1 day. </p>"},{"location":"Rules/Account/account_statement_timeout/#sql","title":"SQL","text":"<pre><code>select\n    parameter_key,\n    parameter_value,\n    parameter_default\nfrom\n    {{ ref('stg__parameters_in_account') }}\nwhere True\n    and  parameter_key in ('STATEMENT_TIMEOUT_IN_SECONDS', 'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS')\n    and (parameter_value &gt; 172800 or parameter_value = 0)\n</code></pre>"},{"location":"Rules/Account/account_statement_timeout/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>These two parameters help prevent blocking of compute resources due to long running queries or warehouse-related issues.  </p>"},{"location":"Rules/Account/account_statement_timeout/#how-to-remediate","title":"How to Remediate","text":"<p>Set up the values for the two parameters in seconds (e.g. 8 hours ~ 22 800 seconds):</p> <pre><code>ALTER ACCOUNT SET STATEMENT_TIMEOUT_IN_SECONDS= 28800;\nALTER ACCOUNT SET STATEMENT_QUEUED_TIMEOUT_IN_SECONDS= 28800;\n</code></pre>"},{"location":"Rules/Account/accountadmin_at_least_2_users/","title":"Accountadmin at Least 2 Users","text":""},{"location":"Rules/Account/accountadmin_at_least_2_users/#model-name","title":"Model name","text":"<p>accountadmin_at_least_2_users</p>"},{"location":"Rules/Account/accountadmin_at_least_2_users/#description","title":"Description","text":"<p>Assign ACCOUNTADMIN role at least two users.</p>"},{"location":"Rules/Account/accountadmin_at_least_2_users/#sql","title":"SQL","text":"<pre><code>-- Show the ACCOUNTADMIN role and see how many users are assigned to it\nSHOW ROLES like 'ACCOUNTADMIN';\n</code></pre>"},{"location":"Rules/Account/accountadmin_at_least_2_users/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Assign this role to at least two users. We follow strict security procedures for resetting a forgotten or lost password for users with the ACCOUNTADMIN role. These procedures can take up to two business days. Assigning the ACCOUNTADMIN role to more than one user avoids having to go through these procedures because the users can reset each other\u2019s passwords.</p>"},{"location":"Rules/Account/accountadmin_at_least_2_users/#how-to-remediate","title":"How to Remediate","text":"<p>Grant ACCOUNTADMIN permission to another user:</p> <pre><code>USE ROLE ACCOUNTADMIN;\nGRANT ROLE ACCOUNTADMIN to user &lt;user_name&gt;;\n</code></pre>"},{"location":"Rules/Account/accountadmin_created_objects/","title":"Accountadmin Created Objects","text":""},{"location":"Rules/Account/accountadmin_created_objects/#model-name","title":"Model name","text":"<p>accountadmin_created_objects</p>"},{"location":"Rules/Account/accountadmin_created_objects/#description","title":"Description","text":"<p>Avoid Using the ACCOUNTADMIN Role to Create Objects.</p>"},{"location":"Rules/Account/accountadmin_created_objects/#sql","title":"SQL","text":"<pre><code>select * \nfrom snowflake.account_usage.grants_to_roles \nwhere deleted_on is null\nand granted_to = 'ROLE' \nand grantee_name = 'ACCOUNTADMIN'\nand granted_by = 'ACCOUNTADMIN'\nand privilege = 'OWNERSHIP'\nand granted_on not in (\n    'INTEGRATION',\n    'RESOURCE MONITOR',\n    'SHARE',\n    'NOTIFICATION SUBSCRIPTION',\n    'MANAGED ACCOUNT'\n);\n</code></pre>"},{"location":"Rules/Account/accountadmin_created_objects/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>The ACCOUNTADMIN role is intended for performing initial setup tasks in the system and managing account-level objects and tasks on a day-to-day basis. As such, it should not be used to create objects in your account, unless you absolutely need these objects to have the highest level of secure access. If you create objects with the ACCOUNTADMIN role and you want users to have access to these objects, you must explicitly grant privileges on the objects to the roles for these users.</p> <p>Instead, we recommend creating a hierarchy of roles aligned with business functions in your organization and ultimately assigning these roles to the SYSADMIN role. For more information, see Aligning Object Access with Business Functions in this topic.</p>"},{"location":"Rules/Account/accountadmin_created_objects/#how-to-remediate","title":"How to Remediate","text":"<p>There should be a hierarchy of roles aligned with business functions in your organization, which are assigned to the SYSADMIN role. See Aligning Object Access with Business Function for more information on this topic.</p> <p>Determine the appropriate roles to own the objects previously created by ACCOUNTADMIN, and reassign the OWNERSHIP privilege to them using the GRANT OWNERSHIP command. For example:</p> <pre><code>GRANT OWNERSHIP ON SCHEMA marketing TO ROLE marketing_r;\n</code></pre> <p>Note: It will take up to 2h for the changes in ownership to be reflected in the dbt models.</p>"},{"location":"Rules/Account/accountadmin_default_role/","title":"Accountadmin default role","text":""},{"location":"Rules/Account/accountadmin_default_role/#model-name","title":"Model name","text":"<pre><code>accountadmin_default_role\n</code></pre>"},{"location":"Rules/Account/accountadmin_default_role/#description","title":"Description","text":"<p>Avoid to set ACCOUNTADMIN as a default role.</p>"},{"location":"Rules/Account/accountadmin_default_role/#sql","title":"SQL","text":"<pre><code>select user_id, name FROM snowflake.account_usage.users\nwhere default_role = 'ACCOUNTADMIN';\n</code></pre>"},{"location":"Rules/Account/accountadmin_default_role/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>To help prevent account administrators from inadvertently using the ACCOUNTADMIN role to create objects, assign these users additional roles and designate one of these roles as their default (i.e. do not make ACCOUNTADMIN the default role for any users in the system).</p> <p>This doesn\u2019t prevent them from using the ACCOUNTADMIN role to create objects, but it forces them to explicitly change their role to ACCOUNTADMIN each time they log in. This can help make them aware of the purpose/function of roles in the system and encourage them to change to the appropriate role for performing a given task, particularly when they need to perform account administrator tasks.</p>"},{"location":"Rules/Account/accountadmin_default_role/#how-to-remediate","title":"How to Remediate","text":"<p>Instead of massively using the ACCOUNTADMIN role, you should create role what is exactly need for that user.</p> <p>Change the default role to another one:</p> <pre><code>ALTER USER &lt;user_name&gt; SET DEFAULT_ROLE = &lt;other_role&gt;;\n</code></pre>"},{"location":"Rules/Account/accountadmin_email/","title":"Accountadmin should have email address","text":""},{"location":"Rules/Account/accountadmin_email/#model-name","title":"Model name","text":"<pre><code>accountadmin_email\n</code></pre>"},{"location":"Rules/Account/accountadmin_email/#description","title":"Description","text":"<p>ACCOUNTADMIN user(s) should have email addresses, in case of Snowflake Support needs to contact with the client.</p>"},{"location":"Rules/Account/accountadmin_email/#sql","title":"SQL","text":"<pre><code>select\n    u.name\n    , u.login_name\nfrom snowflake.account_usage.grants_to_users as ug\njoin snowflake.account_usage.users as u \n  on u.name = ug.grantee_name\nwhere ug.deleted_on is null\nand u.deleted_on is null\nand ug.role = 'ACCOUNTADMIN'\nand email is null;\n</code></pre>"},{"location":"Rules/Account/accountadmin_email/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>It also helps if you associate an actual person\u2019s email address to ACCOUNTADMIN users, so that Snowflake Support knows who to contact in an urgent situation.</p>"},{"location":"Rules/Account/accountadmin_email/#how-to-remediate","title":"How to Remediate","text":"<p>For all user that assigned ACCOUNTADMIN role, they should have email address.</p> <p>Assign email address to user:</p> <pre><code>ALTER USER &lt;user_name&gt; SET EMAIL = &lt;user_email&gt;;\n</code></pre>"},{"location":"Rules/Account/accountadmin_mfa/","title":"Accountadmin MFA","text":""},{"location":"Rules/Account/accountadmin_mfa/#model-name","title":"Model name","text":"<p>accountadmin_mfa</p>"},{"location":"Rules/Account/accountadmin_mfa/#description","title":"Description","text":"<p>All users assigned the ACCOUNTADMIN role should also be required to use multi-factor authentication (MFA) for login</p>"},{"location":"Rules/Account/accountadmin_mfa/#sql","title":"SQL","text":"<pre><code>select\n    u.name\n    , u.login_name\nfrom snowflake.account_usage.grants_to_users as ug\njoin snowflake.account_usage.users as u \n  on u.name = ug.grantee_name\nwhere ug.deleted_on is null\nand u.deleted_on is null\nand ug.role = 'ACCOUNTADMIN'\nand ext_authn_duo = false;\n</code></pre>"},{"location":"Rules/Account/accountadmin_mfa/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>At a minimum, Snowflake strongly recommends that all users with the ACCOUNTADMIN role be required to use MFA.</p>"},{"location":"Rules/Account/accountadmin_mfa/#how-to-remediate","title":"How to Remediate","text":"<p>Follow the guides described in the Snowflake Documentation.</p>"},{"location":"Rules/Account/parameter_data_retention_time_in_days/","title":"Parameter Data Retention Time in Days","text":""},{"location":"Rules/Account/parameter_data_retention_time_in_days/#model-name","title":"Model name","text":"<p>parameter_data_retention_time_in_days</p>"},{"location":"Rules/Account/parameter_data_retention_time_in_days/#description","title":"Description","text":"<p>Extend the default 1 day regarding Time Travel interval. Often not so much cost compare to the benefit it provides.</p> <p>DEPENDS ON THE EDITION THE ACCOUNT USES! At the moment the only way to query the edition using ORGADMIN role!</p>"},{"location":"Rules/Account/parameter_data_retention_time_in_days/#sql","title":"SQL","text":"<pre><code>-- NEED ORGADMIN role!!!\nuse role orgadmin;\nshow organization accounts;\n-- Look for the column \"edition\"\n</code></pre>"},{"location":"Rules/Account/parameter_data_retention_time_in_days/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see Understanding &amp; Using Time Travel.</p> <p>Values: 0 or 1 (for Standard Edition)         0 to 90 (for Enterprise Edition or higher)</p> <p>Default: 1</p>"},{"location":"Rules/Account/parameter_data_retention_time_in_days/#how-to-remediate","title":"How to Remediate","text":"<p>Set the time travel to 7 days at account level (need Enterprise Edition!):</p> <pre><code>use role accountadmin;\n-- show the current\nshow parameters in account;\n-- extend it to 7 days\nALTER ACCOUNT SET DATA_RETENTION_TIME_IN_DAYS=7;\n-- check it\nshow parameters like 'DATA_RETENTION_TIME_IN_DAYS%' in account;\n</code></pre>"},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/","title":"Parameter Statement Timeout in Seconds","text":""},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/#model-name","title":"Model name","text":"<p>parameter_statement_timeout_in_seconds</p>"},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/#description","title":"Description","text":"<p>Cancel long queries after X hours. Most of the cases the default 48 hours looks too high.</p>"},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/#sql","title":"SQL","text":"<pre><code>SHOW PARAMETERS LIKE 'statement_timeout%' IN WAREHOUSE; -- at warehouse level\n\nSHOW PARAMETERS LIKE 'statement_timeout%' FOR ACCOUNT; -- at account level\n\nSHOW PARAMETERS LIKE 'statement_timeout%' FOR SESSION; -- at session level\n\nSHOW PARAMETERS LIKE 'statement_timeout%' FOR USER;\n</code></pre>"},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs - Snowflake parameter: STATEMENT_TIMEOUT_IN_SECONDS</p> <p>Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system.</p> <p>Values: 0 to 604800 (i.e. 7 days) \u2014 a value of 0 specifies that the maximum timeout value is enforced. Default: 172800 (i.e. 2 days)</p>"},{"location":"Rules/Account/parameter_statement_timeout_in_seconds/#how-to-remediate","title":"How to Remediate","text":"<p>Set it to 8 hours:</p> <pre><code>ALTER WAREHOUSE &lt;warehouse&gt; SET STATEMENT_TIMEOUT_IN_SECONDS = 28800;\n</code></pre> <p>Here comes a quick help if you need other value.</p> hours min sec 1 60 3600 2 120 7200 4 240 14400 8 480 28800 12 720 43200 24 1440 86400 48 2880 172800"},{"location":"Rules/Account/parameter_timezone/","title":"Parameter Timezone","text":""},{"location":"Rules/Account/parameter_timezone/#model-name","title":"Model name","text":"<pre><code>parameter_timezone\n</code></pre>"},{"location":"Rules/Account/parameter_timezone/#description","title":"Description","text":"<p>Snowflake uses America/Los Angeles as default timezone which can lead some strange issues. It\u2019s not a problem if you use the same timezone (mostly UTC is suggested) or timezone_ltz datatypes, but with ntz you can be in trouble. :slight_smile: </p>"},{"location":"Rules/Account/parameter_timezone/#sql","title":"SQL","text":"<pre><code>SHOW PARAMETERS IN ACCOUNT;\nselect *\nfrom\n    table(result_scan(last_query_id()))\nwhere True\n    and parameter_value = parameter_default\n    and parameter_key = 'TIMEZONE';\n</code></pre>"},{"location":"Rules/Account/parameter_timezone/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Specifies the time zone for the session.</p> <p>Values: You can specify a time zone name or a link name from release 2021a of the IANA Time Zone Database (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.).</p> <p>Default: America/Los_Angeles</p>"},{"location":"Rules/Account/parameter_timezone/#how-to-remediate","title":"How to Remediate","text":"<p>Setting up UTC as the default timezone:</p> <pre><code>-- session level\nshow parameters like 'TIMEZONE';\n\nkey         value               default           \nTIMEZONE    America/Los_Angeles America/Los_Angeles\n\n-- same but account level\nshow parameters like 'TIMEZONE' in account;\n\n-- alter to UTC timezone\nALTER ACCOUNT SET TIMEZONE = 'UTC';\n</code></pre>"},{"location":"Rules/Account/user_default_role_not_set/","title":"User Default Role Not Set","text":""},{"location":"Rules/Account/user_default_role_not_set/#model-name","title":"Model name","text":"<p>user_default_role_not_set</p>"},{"location":"Rules/Account/user_default_role_not_set/#description","title":"Description","text":"<p>As a best practice, all users should have a default role which should correspond to their intended use of the Snowflake account. </p>"},{"location":"Rules/Account/user_default_role_not_set/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name FROM snowflake.account_usage.users\nWHERE True \n    and name not in ('SNOWFLAKE')\n    and deleted_on is null\n    and default_role is null \n</code></pre>"},{"location":"Rules/Account/user_default_role_not_set/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Setting a default role for a user is important due to security as well as user's experience when working with Snowflake.</p>"},{"location":"Rules/Account/user_default_role_not_set/#how-to-remediate","title":"How to Remediate","text":"<p>Set default role for a user using the following command:</p> <pre><code>ALTER USER &lt;user_name&gt; SET DEFAULT_ROLE = &lt;role_name&gt;;\n</code></pre>"},{"location":"Rules/Account/user_default_warehouse_not_set/","title":"User Default Warehouse Not Set","text":""},{"location":"Rules/Account/user_default_warehouse_not_set/#model-name","title":"Model name","text":"<p>user_default_warehouse_not_set</p>"},{"location":"Rules/Account/user_default_warehouse_not_set/#description","title":"Description","text":"<p>As a best practice, all users should have a default warehouse which should correspond to their intended use of the Snowflake account. </p>"},{"location":"Rules/Account/user_default_warehouse_not_set/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name FROM snowflake.account_usage.users\nWHERE True \n    and name not in ('SNOWFLAKE')\n    and deleted_on is null\n    and default_warehouse is null\n</code></pre>"},{"location":"Rules/Account/user_default_warehouse_not_set/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Setting a default warehouse for a user is important due to security as well as user's experience when working with Snowflake.</p>"},{"location":"Rules/Account/user_default_warehouse_not_set/#how-to-remediate","title":"How to Remediate","text":"<p>Set default warehouse for a user using the following command:</p> <pre><code>ALTER USER &lt;user_name&gt; SET DEFAULT_WAREHOUSE = &lt;warehouse_name&gt;;\n</code></pre>"},{"location":"Rules/Account/user_disabled/","title":"User Disabled","text":""},{"location":"Rules/Account/user_disabled/#model-name","title":"Model name","text":"<p>user_disabled</p>"},{"location":"Rules/Account/user_disabled/#description","title":"Description","text":"<p>ACCOUNT_USAGE view allows to get detailed info for users and their activity in the Snowflake account. </p>"},{"location":"Rules/Account/user_disabled/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name FROM snowflake.account_usage.users\nWHERE True \n    and name not in ('SNOWFLAKE')\n    and deleted_on is null\n and disabled = TRUE;\n</code></pre>"},{"location":"Rules/Account/user_disabled/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>It might be worth considering to drop or re-enable users which have been disabled for a long time. </p>"},{"location":"Rules/Account/user_disabled/#how-to-remediate","title":"How to Remediate","text":"<p>Drop or re-enable the user using one of the following command:</p> <pre><code>DROP USER &lt;user_name&gt;;\nALTER USER &lt;user_name&gt; SET DISABLED = FALSE;\n</code></pre>"},{"location":"Rules/Account/user_inactive/","title":"User Inactive","text":""},{"location":"Rules/Account/user_inactive/#model-name","title":"Model name","text":"<p>user_inactive</p>"},{"location":"Rules/Account/user_inactive/#description","title":"Description","text":"<p>ACCOUNT_USAGE view allows to get detailed info for users and their activity in the Snowflake account. </p>"},{"location":"Rules/Account/user_inactive/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name, last_success_login FROM snowflake.account_usage.users\nWHERE True \n    and name not in ('SNOWFLAKE')\n    and deleted_on is null \nand last_success_login &lt; DATEADD(DAY, -90, CURRENT_TIMESTAMP()) -- haven\u2019t used Snowflake in the last 90 days)\n</code></pre>"},{"location":"Rules/Account/user_inactive/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>If some users have not been active for a very long time, it might be worth considering to disable or drop them.</p>"},{"location":"Rules/Account/user_inactive/#how-to-remediate","title":"How to Remediate","text":"<p>Drop the user using the following command:</p> <pre><code>DROP USER &lt;user_name&gt;;\n</code></pre>"},{"location":"Rules/Cost/resource_monitor_account_monthly/","title":"Resource Monitor Account Monthly","text":""},{"location":"Rules/Cost/resource_monitor_account_monthly/#model-name","title":"Model name","text":"<pre><code>resource_monitor_account_monthly\n</code></pre>"},{"location":"Rules/Cost/resource_monitor_account_monthly/#description","title":"Description","text":"<p>We suggest to setup a Resource Monitor with a monthly quota at account level. It provides an upper limit for your consumption and your warehouse related costs. Please pay attention to estimate the credit for the quota, sometimes not obvious to get a value which is not disturb your work but not an extremely high level.</p>"},{"location":"Rules/Cost/resource_monitor_account_monthly/#sql","title":"SQL","text":"<pre><code>SHOW RESOURCE MONITORS;\nselect\n    *\nfrom\n    table(result_scan(last_query_id()))\nwhere\n    True\n    and level = 'ACCOUNT'\n    and frequency = 'MONTHLY';\n</code></pre>"},{"location":"Rules/Cost/resource_monitor_account_monthly/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>To help control costs and avoid unexpected credit usage caused by running warehouses, Snowflake provides resource monitors. A virtual warehouse consumes Snowflake credits while it runs. A resource monitor can be used to monitor credit usage by virtual warehouses and the cloud services needed to support those warehouses. If desired, the warehouse can be suspended when it reaches a credit limit.</p>"},{"location":"Rules/Cost/resource_monitor_account_monthly/#how-to-remediate","title":"How to Remediate","text":"<p>Setup a monthly limit with 200 credits:</p> <pre><code>CREATE RESOURCE MONITOR \"MONTHLY_MAX_200\" WITH CREDIT_QUOTA = 200\n TRIGGERS\n ON 100 PERCENT DO SUSPEND\n ON 120 PERCENT DO SUSPEND_IMMEDIATE\n ON 50 PERCENT DO NOTIFY;\nALTER ACCOUNT SET RESOURCE_MONITOR = \"MONTHLY_MAX_200\";\n</code></pre>"},{"location":"Rules/Cost/warehouse_auto_resume/","title":"Warehouse Auto Resume","text":""},{"location":"Rules/Cost/warehouse_auto_resume/#model-name","title":"Model name","text":"<pre><code>warehouse_auto_resume\n</code></pre>"},{"location":"Rules/Cost/warehouse_auto_resume/#description","title":"Description","text":"<p>Make sure all virtual warehouses are set to auto-resume. If you are going to implement auto-suspend and set appropriate timeout limits, enabling auto-resume is a must; otherwise, users will not be able to query the system. </p>"},{"location":"Rules/Cost/warehouse_auto_resume/#sql","title":"SQL","text":"<pre><code>-- Show all warehouses in Snowflake account\nSHOW WAREHOUSES;\n\n-- Get the Query ID to use later and help speed this up a bit\nSET QUERY_ID = (\n  SELECT QUERY_ID\n  FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY())\n  WHERE QUERY_TEXT = 'SHOW WAREHOUSES;'\n  ORDER BY START_TIME DESC\n  LIMIT 1\n); \n\n-- Find warehouses matching the condition\n\nSELECT \"name\" as warehouse_name, \"auto_resume\" as auto_resume\nFROM TABLE(RESULT_SCAN($QUERY_ID))\nWHERE \"auto_resume\" = FALSE\n</code></pre>"},{"location":"Rules/Cost/warehouse_auto_resume/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>If auto resume is not enabled, the users will not be able to run queries using the warehouse (unless they explicitly resume the warehouse using ALTER WAREHOUSE statement). </p>"},{"location":"Rules/Cost/warehouse_auto_resume/#how-to-remediate","title":"How to Remediate","text":"<p>Change the auto_resume parameter value for affected virtual warehouse(s).</p> <pre><code>ALTER WAREHOUSE &lt;warehouse_name&gt; SET AUTO_RESUME = TRUE;\n</code></pre>"},{"location":"Rules/Cost/warehouse_auto_suspend/","title":"Warehouse Auto Suspend","text":""},{"location":"Rules/Cost/warehouse_auto_suspend/#model-name","title":"Model name","text":"<p>warehouse_auto_suspend</p>"},{"location":"Rules/Cost/warehouse_auto_suspend/#description","title":"Description","text":"<p>Warehouses can be set to automatically suspend when there\u2019s no activity after a specified period of time. Auto-suspend is enabled by specifying the time period (minutes, hours, etc.) of inactivity for the warehouse.</p> <p>Snowflake recommends setting auto-suspend according to your workload and your requirements for warehouse availability:</p> <p>If you enable auto-suspend, we recommend setting it to a low value (e.g. 5 or 10 minutes or less) because Snowflake utilizes per-second billing. This will help keep your warehouses from running (and consuming credits) when not in use.</p>"},{"location":"Rules/Cost/warehouse_auto_suspend/#sql","title":"SQL","text":"<pre><code>-- Show all warehouses in Snowflake account\nSHOW WAREHOUSES;\n\n-- Get the Query ID to use later and help speed this up a bit\nSET QUERY_ID = (\n  SELECT QUERY_ID\n  FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY())\n  WHERE QUERY_TEXT = 'SHOW WAREHOUSES;'\n  ORDER BY START_TIME DESC\n  LIMIT 1\n); \n-- Find warehouses matching the condition\n\nSELECT \"name\" as warehouse_name, \"auto_suspend\" as auto_suspend\nFROM TABLE(RESULT_SCAN($QUERY_ID))\nWHERE \"auto_suspend\" &gt; 600 or \"auto_suspend\" = 0 or \"auto_suspend\" is null or \"auto_suspend\" LIKE '' or \"auto_suspend\" LIKE 'null'\n</code></pre>"},{"location":"Rules/Cost/warehouse_auto_suspend/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Warehouses with disabled auto_suspend or with auto_suspend set to a high value (more than 10 minutes) might cause excessive and larger than expected Snowflake credit consumption. </p>"},{"location":"Rules/Cost/warehouse_auto_suspend/#how-to-remediate","title":"How to Remediate","text":"<p>Change the auto_suspend parameter value for affected virtual warehouse(s). The value is in seconds, to achieve maximum reduction in credit consumption, it might be worth considering setting the value of this parameter to 60 seconds (which is the minimum time the warehouse will be billed for once after is resumed). </p> <pre><code>ALTER WAREHOUSE &lt;warehouse_name&gt; SET AUTO_SUSPEND = 60;\n</code></pre>"},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/","title":"Warehouse Cloud Service Billing Threshold","text":""},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/#model-name","title":"Model name","text":"<p>warehouse_cloud_service_billing_threshold</p>"},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/#description","title":"Description","text":"<p>Overall for an account (and outside of serverless features), Snowflake will charge for cloud services only if they exceed 10% of the daily virtual warehouse credit consumption. The aim of this rule is to identify the warehouses which are contributing to the cloud service compute costs.</p>"},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/#sql","title":"SQL","text":"<pre><code>select\n\n  warehouse_name,\n  SUM(credits_used) AS credits_used,\n  SUM(credits_used_cloud_services) AS credits_used_cloud_services,\n  SUM(credits_used_cloud_services)/SUM(credits_used) AS percent_cloud_services\n\nfrom {{ ref('stg__warehouse_metering_history') }}\n\nwhere TO_DATE(start_time) &gt;= DATEADD(month, -1, CURRENT_TIMESTAMP())\n    and credits_used_cloud_services &gt; 0\ngroup by 1\nhaving percent_cloud_services &gt;= 0.1\norder by 4 desc\n</code></pre>"},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Identification of the warehouses that are not using enough warehouse time to cover the cloud services portion of compute provides a launching point for additional investigation by isolating warehouses with a high ratio of cloud service use (&gt;10% of overall credits). Investigation candidates include issues around cloning, listing files in S3, partner tools, setting session parameters, etc.</p>"},{"location":"Rules/Cost/warehouse_cloud_service_billing_threshold/#how-to-remediate","title":"How to Remediate","text":"<p>It's recommended to take a more detailed look at the affected warehouses.</p>"},{"location":"Rules/Cost/warehouse_credit_usage_spikes/","title":"Warehouse Credit Usage Spikes","text":""},{"location":"Rules/Cost/warehouse_credit_usage_spikes/#model-name","title":"Model name","text":"<p>warehouse_credit_usage_spikes</p>"},{"location":"Rules/Cost/warehouse_credit_usage_spikes/#description","title":"Description","text":"<p>This rule aims to identify warehouse credit usage that deviates from a pre-defined rule (e.g. daily credit consumption for the previous day exceeded the previous seven-day's credit consumption average at least four times).</p>"},{"location":"Rules/Cost/warehouse_credit_usage_spikes/#sql","title":"SQL","text":"<pre><code>with wh_daily_credit_consumption as (\n\n    select warehouse_id,\n        warehouse_name,\n        DATE(start_time) as date,\n        sum(credits_used) as daily_credit_usage\n    from SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY\n    where date between DATEADD(DAY,-8,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())\n    group by 1,2,3\n\n),\n\nwh_seven_day_average as (\n\n    select warehouse_id,\n           warehouse_name,\n           avg(daily_credit_usage) as seven_day_average_usage \n    from wh_daily_credit_consumption\n    where date&lt;=DATEADD(DAY,-2,CURRENT_DATE())\n    group by 1,2\n\n),\n\nfinal as (\n\n    select a.warehouse_id,\n           a.warehouse_name,\n           a.seven_day_average_usage,\n           c.daily_credit_usage as previous_day_usage\n\n   from wh_seven_day_average as a\n   left join wh_daily_credit_consumption as c on (a.warehouse_id=c.warehouse_id and c.date=DATEADD(DAY,-1,CURRENT_DATE()))\n   where c.daily_credit_usage &gt; 4*a.seven_day_average_usage \n\n)\n\nselect * from final\n</code></pre>"},{"location":"Rules/Cost/warehouse_credit_usage_spikes/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>To identify spikes in warehouse credit consumption, for example if a user set a warehouse to a larger size to do some specific task but did not put it back the way he found it.</p>"},{"location":"Rules/Cost/warehouse_credit_usage_spikes/#how-to-remediate","title":"How to Remediate","text":"<p>Re-size the warehouse: </p> <pre><code>ALTER WAREHOUSE &lt;warehouse_name&gt; SET WAREHOUSE_SIZE = XSMALL;\n</code></pre>"},{"location":"Rules/Cost/warehouse_min_cluster_count/","title":"Warehouse Min CLuster Count","text":""},{"location":"Rules/Cost/warehouse_min_cluster_count/#model-name","title":"Model name","text":"<p>warehouse_min_cluster_count</p>"},{"location":"Rules/Cost/warehouse_min_cluster_count/#description","title":"Description","text":"<p>With multi-cluster warehouses, Snowflake supports allocating, either statically or dynamically, additional clusters to make a larger pool of compute resources available. For a warehouse, it is possible to specify minimum number of clusters that will run when the warehouse is resumed. </p> <p>This feature is available only in Snowflake Enterprise edition (or higher).</p>"},{"location":"Rules/Cost/warehouse_min_cluster_count/#sql","title":"SQL","text":"<pre><code>-- Setup and context\nUSE ROLE ACCOUNTADMIN;\nUSE WAREHOUSE &lt;Your Warehouse&gt;;\n\n-- Show all warehouses in Snowflake account\nSHOW WAREHOUSES;\n\n-- Get the Query ID to use later and help speed this up a bit\nSET QUERY_ID = (\n  SELECT QUERY_ID\n  FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY())\n  WHERE QUERY_TEXT = 'SHOW WAREHOUSES;'\n  ORDER BY START_TIME DESC\n  LIMIT 1\n); \n-- Find warehouses matching the condition\n\nSELECT \"name\" as warehouse_name, \"min_cluster_count\" as min_cluster_count\nFROM TABLE(RESULT_SCAN($QUERY_ID))\nWHERE \"min_cluster_count\" &gt; 1\n</code></pre>"},{"location":"Rules/Cost/warehouse_min_cluster_count/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>If min_cluster_count&gt;1 then more than one cluster will run each time the warehouse is resumed, potentially causing excessive credit consumption.  </p>"},{"location":"Rules/Cost/warehouse_min_cluster_count/#how-to-remediate","title":"How to Remediate","text":"<p>Change the min_cluster_count parameter value for affected virtual warehouse(s).</p> <pre><code>ALTER WAREHOUSE &lt;warehouse_name&gt; SET MIN_CLUSTER_COUNT = 1;\n</code></pre>"},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/","title":"Warehouse Resource Monitor Assignment","text":""},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/#model-name","title":"Model name","text":"<p>warehouse_resource_monitor_assignment</p>"},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/#description","title":"Description","text":"<p>To help control costs and avoid unexpected credit usage caused by running warehouses, Snowflake provides resource monitors. Monitor level property specifies whether the resource monitor is used to monitor the credit usage for your entire Account (i.e. all warehouses in the account) or a specific set of individual warehouses. Having a resource monitor set up for each virtual warehouse allows for regular monitoring of the credit consumption.</p>"},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/#sql","title":"SQL","text":"<pre><code>-- Setup and context\nUSE ROLE ACCOUNTADMIN;\nUSE WAREHOUSE &lt;Your Warehouse&gt;;\n\nSHOW WAREHOUSES;\n\n-- Get the Query ID to use later and help speed this up a bit\nSET QUERY_ID = (\n  SELECT QUERY_ID\n  FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY())\n  WHERE QUERY_TEXT = 'SHOW WAREHOUSES;'\n  ORDER BY START_TIME DESC\n  LIMIT 1\n); \n-- Find warehouses matching the condition\n\nSELECT \"name\" as warehouse_name, \"resource_monitor\" as resource_monitor\nFROM TABLE(RESULT_SCAN($QUERY_ID))\nWHERE \"resource_monitor\" is null or \"resource_monitor\" LIKE 'null' or \"resource_monitor\" LIKE '' \n</code></pre>"},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Setting a resource monitor allows specifying actions (e.g. notifications) which should take place in case credit consumption exceed specified levels. This feature cannot be fully utilized if some warehouses are not assigned to a resource monitor.</p>"},{"location":"Rules/Cost/warehouse_resource_monitor_assignment/#how-to-remediate","title":"How to Remediate","text":"<p>Assign a resource monitor to a virtual warehouse:</p> <pre><code>ALTER WAREHOUSE SET RESOURCE MONITOR = &lt;resource_monitor_name&gt;;\n</code></pre> <p>For details about how to create a new resource monitor, please consult Snowflake Docs.</p>"},{"location":"Rules/Performance/date_time_column_type/","title":"Date Time Column Type","text":""},{"location":"Rules/Performance/date_time_column_type/#model-name","title":"Model name","text":"<p>date_time_column_type</p>"},{"location":"Rules/Performance/date_time_column_type/#description","title":"Description","text":"<p>When defining columns to contain dates or timestamps, Snowflake recommends choosing a date or timestamp data type rather than a character data type. Snowflake stores DATE and TIMESTAMP data more efficiently than VARCHAR, resulting in better query performance. Choose an appropriate date or timestamp data type, depending on the level of granularity required. </p>"},{"location":"Rules/Performance/date_time_column_type/#sql","title":"SQL","text":"<pre><code>with stg_columns as (\n\n    select * from {{ ref('stg__account_usage__columns') }}\n\n),\n\nstg_tables as (\n\n    select * from {{ ref('stg__account_usage__tables') }}\n\n),\n\nfinal as (\n\n    select \n\n        stg_columns.table_catalog,\n        stg_columns.table_schema,\n        stg_columns.table_name,\n        stg_columns.ordinal_position as column_id,\n        stg_columns.column_name,\n        stg_columns.data_type,\n        stg_columns.character_maximum_length\n\n    from stg_columns\n    join stg_tables\n        on (stg_tables.table_schema = stg_columns.table_schema\n            and stg_tables.table_id = stg_columns.table_id\n            and stg_tables.table_type = 'BASE TABLE'\n            )\n\n    where stg_columns.data_type = 'TEXT'\n        and stg_columns.table_schema != 'INFORMATION_SCHEMA'\n        and stg_columns.column_name ILIKE ANY ('%DATE%', '%TIME%')\n        and stg_columns.deleted is null\n        and stg_tables.deleted is null\n\n    order by 1, 2, 3\n)\n\nselect * from final\n</code></pre>"},{"location":"Rules/Performance/date_time_column_type/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>To prevent data type-related issues with dates and timestamps and improve performance.</p>"},{"location":"Rules/Performance/date_time_column_type/#how-to-remediate","title":"How to Remediate","text":"<p>It is not directly possible to change the data type in a table, one of the options is to try the following workaround:</p> <ol> <li>Add a new column with a temp name, with the new data type</li> <li>Run an update statement to set the new column to the old column's value (with any required transformations)</li> <li>Rename the columns, and drop the old column if desired.</li> </ol> <pre><code>ALTER TABLE &lt;TABLE_NAME&gt; ADD COLUMN &lt;COLUMN_NAME_TEMP&gt; DATE;\nUPDATE &lt;TABLE_NAME&gt; SET &lt;COLUMN_NAME_TEMP&gt; = TO_DATE(&lt;COLUMN_NAME&gt;);\nALTER TABLE &lt;TABLE_NAME&gt; DROP COLUMN &lt;COLUMN_NAME&gt;;\nALTER TABLE &lt;TABLE_NAME&gt; RENAME COLUMN &lt;COLUMN_NAME_TEMP&gt; to &lt;COLUMN_NAME&gt;;\n</code></pre>"},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/","title":"Custom Roles Granted to Sysadmin","text":""},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/#model-name","title":"Model name","text":"<p>custom_roles_granted_to_sysadmin</p>"},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/#description","title":"Description","text":"<p>As a Snowflake best practice, functional roles in a role hierarchy should be granted to the system administrator (SYSADMIN) role. System administrators can then grant privileges on database objects to any roles in this hierarchy.</p>"},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/#sql","title":"SQL","text":"<pre><code>SHOW ROLES;\n</code></pre>"},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/#reason-to-flag","title":"Reason to flag","text":"<p>This may indicate a problem with the role hierarchy. System administrators is not able to perform some tasks or actions corresponding to their role.</p>"},{"location":"Rules/Role/custom_roles_granted_to_sysadmin/#how-to-remediate","title":"How to Remediate","text":"<p>Grant custom role to SYSADMIN role:</p> <pre><code>GRANT ROLE &lt;role_name&gt; TO ROLE SYSADMIN;\n</code></pre>"},{"location":"Rules/Security/account_client_session_keep_alive/","title":"Account Client Session Keep Alive","text":""},{"location":"Rules/Security/account_client_session_keep_alive/#model-name","title":"Model name","text":"<p>account_client_session_keep_alive</p>"},{"location":"Rules/Security/account_client_session_keep_alive/#description","title":"Description","text":"<p>CLIENT_SESSION_KEEP_ALIVE is a parameter that indicates whether to force a user to log in again after a period of inactivity in the session. It can be set at an account level or lower levels (users, session). The default value and recommended value for account level setting is FALSE.</p>"},{"location":"Rules/Security/account_client_session_keep_alive/#sql","title":"SQL","text":"<pre><code>select\n    parameter_key,\n    parameter_value,\n    parameter_default\nfrom\n    {{ ref('stg__parameters_in_account') }}\nwhere True\n    and  parameter_key = 'CLIENT_SESSION_KEEP_ALIVE'\n    and parameter_value = True\n</code></pre>"},{"location":"Rules/Security/account_client_session_keep_alive/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>If this parameter is set to TRUE, then the session remains active indefinitely as long as the connection is active. Too many sessions created with this parameter set to true puts stress on resources and can lead to poor performance.</p>"},{"location":"Rules/Security/account_client_session_keep_alive/#how-to-remediate","title":"How to Remediate","text":"<p>Change the parameter value to FALSE for the account:</p> <pre><code>ALTER ACCOUNT SET CLIENT_SESSION_KEEP_ALIVE = FALSE;\n</code></pre>"},{"location":"Rules/Security/network_restrict_access/","title":"Network Restrict Access","text":""},{"location":"Rules/Security/network_restrict_access/#model-name","title":"Model name","text":"<p>network_restrict_access</p>"},{"location":"Rules/Security/network_restrict_access/#description","title":"Description","text":"<p>By default, Snowflake allows users to connect to the service from any computer or device IP address. As a system administrator you can allow and deny access from addresses with network policies.</p>"},{"location":"Rules/Security/network_restrict_access/#sql","title":"SQL","text":"<pre><code>-- Lists all network policies defined in the system\nSHOW NETWORK POLICIES;\n\n-- Describes the properties specified for a network policy\nDESC[RIBE] NETWORK POLICY &lt;name&gt;;\n</code></pre>"},{"location":"Rules/Security/network_restrict_access/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>Network policies allow restricting access to your account based on user IP address. Effectively, a network policy enables you to create an IP allowed list, as well as an IP blocked list, if desired.</p>"},{"location":"Rules/Security/network_restrict_access/#how-to-remediate","title":"How to Remediate","text":"<p>Check the necessary steps on the Snowflake documentation page mentioned above.</p> <p>Use network policies to allow \u201cknown\u201d client locations (IP ranges) to connect to your Snowflake account while blocking others.</p> <p>Don't forget to whitelist the other services you use, like dbtCloud or Fivetran.  Regarding dbtCloud check their documentation for the exact IP ranges.</p>"},{"location":"Rules/Security/user_password_not_changed/","title":"User Password Not Changed","text":""},{"location":"Rules/Security/user_password_not_changed/#model-name","title":"Model name","text":"<p>user_password_not_changed</p>"},{"location":"Rules/Security/user_password_not_changed/#description","title":"Description","text":"<p>ACCOUNT_USAGE view allows to get detailed info for users and their activity in the Snowflake account. As a best practice, users should change their Snowflake password regularly. This rule allows to identify users who haven't changed their password for a specified time period (e.g. 180 days).</p>"},{"location":"Rules/Security/user_password_not_changed/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name, has_password, password_last_set_time FROM snowflake.account_usage.users\nWHERE True \n    and name not in ('SNOWFLAKE')\n    and deleted_on is null\nand has_password = TRUE AND password_last_set_time &lt; DATEADD(DAY, -180, CURRENT_TIMESTAMP()) -- hasn\u2019t changed in the last 180 days)\n</code></pre>"},{"location":"Rules/Security/user_password_not_changed/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>It might be worth considering to force a password change for users that don't change their password regularly.</p>"},{"location":"Rules/Security/user_password_not_changed/#how-to-remediate","title":"How to Remediate","text":"<p>Set MUST_CHANGE_PASSWORD user parameter to TRUE:</p> <pre><code>ALTER USER &lt;user_name&gt; SET MUST_CHANGE_PASSWORD = TRUE;\n</code></pre>"},{"location":"Rules/Security/username_loginname/","title":"Username loginname","text":""},{"location":"Rules/Security/username_loginname/#model-name","title":"Model name","text":"<pre><code>username_loginname\n</code></pre>"},{"location":"Rules/Security/username_loginname/#description","title":"Description","text":"<p>As a best practice, username and login name values should be different for all users.</p>"},{"location":"Rules/Security/username_loginname/#sql","title":"SQL","text":"<pre><code>SELECT user_id, name, login_name FROM snowflake.account_usage.users\nWHERE name = login_name;\n</code></pre>"},{"location":"Rules/Security/username_loginname/#reason-to-flag","title":"Reason to flag","text":"<p>Snowflake Docs</p> <p>The rule that username and login name for a user is different increases account security.</p>"},{"location":"Rules/Security/username_loginname/#how-to-remediate","title":"How to Remediate","text":"<p>To update existing username or login name values, execute the ALTER USER command. When creating new users with the CREATE USER command, ensure that the NAME and LOGIN_NAME values are different.</p> <pre><code>ALTER USER &lt;user_name&gt; SET LOGIN_NAME = &lt;string&gt;;\nCREATE USER &lt;user_name&gt; LOGIN_NAME = &lt;string&gt;;\n</code></pre>"}]}